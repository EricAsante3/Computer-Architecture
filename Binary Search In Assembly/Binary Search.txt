#       CSE 3666 Lab 4
#	TAG: deedfb266c40e5995680

	.data
	.align	2	
word_array:     .word
        0,   10,   20,  30,  40,  50,  60,  70,  80,  90, 
        100, 110, 120, 130, 140, 150, 160, 170, 180, 190,
        200, 210, 220, 230, 240, 250, 260, 270, 280, 290,
        300, 310, 320, 330, 340, 350, 360, 370, 380, 390,
        400, 410, 420, 430, 440, 450, 460, 470, 480, 490,
        500, 510, 520, 530, 540, 550, 560, 570, 580, 590,
        600, 610, 620, 630, 640, 650, 660, 670, 680, 690,
        700, 710, 720, 730, 740, 750, 760, 770, 780, 790,
        800, 810, 820, 830, 840, 850, 860, 870, 880, 890,
        900, 910, 920, 930, 940, 950, 960, 970, 980, 990

        # code
        .text
        .globl  main
main:   
	addi	s0, x0, -1
	addi	s4, x0, -1
	addi	s5, x0, -1
	addi	s6, x0, -1
	addi	s7, x0, -1

	# help to check if any saved registers are changed during the function call
	# could add more...

        lui     s1, 0x10010      # starting addr of word_array in standard memory config
        addi    s2, x0, 100      # 100 elements in the array

        # read an integer from the console
        addi    a7, x0, 5
        ecall

        addi    s3, a0, 0       # keep a copy of v in s3
        
        # call binary search
        addi	a0, s1, 0	# int a[]
        addi	a1, s2, 0	# int n
        addi	a2, s3, 0	# int v
        jal	ra, binary_search

exit:   
	#addi a7,zero, 1
	#ecall
	
	addi    a7, x0, 10      
        ecall

#### Do not change lines above
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
binary_search:

#	a[] = a0	int n = a1	int v = a2

        # TODO
        addi sp, sp, -8 # create space in the stack to store variables
	sw   ra, 4(sp) # ra
	sw   s1, 0(sp)# a[]

	bne a1, zero, if_n_0_exit # (n != 0)   // something in the array

	addi a0, zero, -1	# rv = -1
	beq zero, zero, f_exit  # goto  f_exit;    // return -1
	
if_n_0_exit: #beq a1, zero, if_n_0	# n=a1 if (n == 0) 


	srai t1, a1, 1	# t1 = half | int half = n / 2;   // integer division
	slli t2,t1, 2	# t2 = half_offset (half * 4)
	add t3,a0,t2		#t3 = &a[half_offset]
	lw a6, 0(t3) 		# a6 = half_v / int half_v = a[half_offset];
	
	
if_half_v_v_test: bne a6, a2, skip_if_half_v_v #  if (half_v != v)

	add a0, zero, t1	#  rv = half;
	beq zero, zero, f_exit  #exit when done
	
skip_if_half_v_v:


	blt a6, a2, else	#else if (half_v < v)
else_if:	
	add a1, t1, zero
	jal ra, binary_search	#binary_search(a, half, v); 
	beq x0,x0 f_exit	#exit
	#a0 = rv

else: # v > half_v
	addi s1, t1, 1	#left = s1 |int left = half + 1;
	
	#add a0, s1, t4	#&a[left]
	slli t6,s1, 2	
	add a0, a0, t6	
	sub a1, a1, s1	
	
      	jal ra, binary_search
      	
      	blt a0, x0, f_exit
      	add a0, a0, s1 
      
f_exit: 

	lw   s1, 0(sp)
	lw   ra, 4(sp) 

        addi sp, sp, 8 
        
	jalr zero, ra, 0


	
	
	
	